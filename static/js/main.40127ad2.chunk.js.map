{"version":3,"sources":["components/ContactList/ContactList.module.css","components/App/App.module.css","components/ContactForm/ContactForm.module.css","redux/slices/contacts.js","redux/slices/filter.js","redux/store/index.js","components/Section/Section.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.jsx","index.js"],"names":["module","exports","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","deleteContacts","mutation","contactID","url","method","invalidatesTags","createContacts","newContact","body","useFetchContactsQuery","useDeleteContactsMutation","useCreateContactsMutation","filterSlice","createSlice","name","initialState","reducers","filterContacts","state","action","payload","actions","store","configureStore","reducer","filter","middleware","getDefaultMiddleware","devTools","process","setupListeners","dispatch","Section","title","children","ContactForm","useState","number","setNumber","setName","handleInputChange","e","currentTarget","value","reset","onSubmit","preventDefault","type","pattern","required","onChange","className","s","btn","ContactList","data","isFetching","isDeleting","isLoading","contactsList","contacts","contact","toLowerCase","includes","filtersContacts","useSelector","list","map","el","posBtn","text","onClick","id","Filter","useDispatch","App","wrapper","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40127ad2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__grIHE\",\"text\":\"ContactList_text__2WchG\",\"btn\":\"ContactList_btn__3kqMd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__3litf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactForm_btn__1Z_9W\"};","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const contactsApi = createApi({\r\n  reducerPath: 'contactsApi',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: `https://611a7b5f5710ca00173a1a4e.mockapi.io/api/v1/`,\r\n  }),\r\n  tagTypes: ['Contact'],\r\n  endpoints: builder => ({\r\n    fetchContacts: builder.query({\r\n      query: () => '/contacts',\r\n      providesTags: ['Contact'],\r\n    }),\r\n    deleteContacts: builder.mutation({\r\n      query: contactID => ({\r\n        url: `/contacts/${contactID}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: ['Contact'],\r\n    }),\r\n    createContacts: builder.mutation({\r\n      query: newContact => ({\r\n        url: '/contacts',\r\n        method: 'POST',\r\n        body: newContact,\r\n      }),\r\n      invalidatesTags: ['Contact'],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useFetchContactsQuery, useDeleteContactsMutation, useCreateContactsMutation } = contactsApi;\r\n\r\n// import { createSlice } from '@reduxjs/toolkit';\r\n\r\n// const contactsSlice = createSlice({\r\n//   name: 'conacts',\r\n//   initialState: [\r\n//     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n//   ],\r\n//   reducers: {\r\n//     addContacts: (state, action) => {\r\n//       localStorage.setItem(\r\n//         'contacts',\r\n//         JSON.stringify([...state, action.payload]),\r\n//       );\r\n//       return [...state, action.payload];\r\n//     },\r\n//     deleteContacts: (state, action) => {\r\n//       const contact = state.filter(contact => contact.id !== action.payload);\r\n//       localStorage.setItem('contacts', JSON.stringify(contact));\r\n//       return contact;\r\n//     },\r\n//   },\r\n// });\r\n\r\n// export const { addContacts, deleteContacts } = contactsSlice.actions;\r\n// export default contactsSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const filterSlice = createSlice({\r\n  name: 'filter',\r\n  initialState: '',\r\n  reducers: {\r\n    filterContacts: (state, action) => action.payload,\r\n  },\r\n});\r\n\r\nexport const { filterContacts } = filterSlice.actions;\r\nexport default filterSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport { setupListeners } from '@reduxjs/toolkit/query';\r\nimport { contactsApi } from 'redux/slices/contacts';\r\n\r\nimport filter from 'redux/slices/filter';\r\n\r\n\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    filter: filter,\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n  },\r\n  middleware: getDefaultMiddleware => [\r\n    ...getDefaultMiddleware(),\r\n    contactsApi.middleware,\r\n  ],\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nsetupListeners(store.dispatch)\r\n\r\nexport default store;\r\n\r\n// import { configureStore } from '@reduxjs/toolkit';\r\n// import contacts from 'redux/slices/contacts';\r\n// import filter from 'redux/slices/filter';\r\n\r\n// const rootReducer = {\r\n//   contacts,\r\n//   filter,\r\n// };\r\n\r\n// const store = configureStore({\r\n//   reducer: rootReducer,\r\n//   devTools: process.env.NODE_ENV !== 'production',\r\n// });\r\n\r\n// export default store;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import { useCreateContactsMutation } from 'redux/slices/contacts';\r\n\r\n\r\nimport React, { useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { addContacts } from 'redux/slices/contacts';\r\n// import { nanoid } from 'nanoid';\r\n\r\nimport s from 'components/ContactForm/ContactForm.module.css';\r\n\r\nexport default function ContactForm() {\r\n\r\n  const [createContacts] = useCreateContactsMutation();\r\n\r\n  const [number, setNumber] = useState('');\r\n  const [name, setName] = useState('');\r\n  // const dispatch = useDispatch();\r\n  // const contacts = useSelector(state => state.contacts);\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    createContacts({ name, number });\r\n    \r\n\r\n\r\n    // if (contacts.some(contact => contact.name === name)) {\r\n    //   alert(`${name} is already in contacts.`);\r\n    // } else {\r\n    //   dispatch(addContacts({ id: nanoid(10), name, number }));\r\n    // }\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <h2>Name</h2>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n      <div>\r\n        <h2>Number</h2>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n      <button className={s.btn}>Add contact</button>\r\n    </form>\r\n  );\r\n}\r\n\r\n// ContactForm.propTypes = {\r\n//   onSubmit: PropTypes.func.isRequired,\r\n// };\r\n","import {\r\n  useFetchContactsQuery,\r\n  useDeleteContactsMutation,\r\n} from 'redux/slices/contacts';\r\n\r\n// import PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\n// import { deleteContacts } from 'redux/actions/contacts';\r\n// import { deleteContacts } from 'redux/slices/contacts';\r\n\r\nimport s from 'components/ContactList/ContactList.module.css';\r\n\r\nconst filtersContacts = (contacts, filter) => {\r\n  if (filter === '') {\r\n    // console.log('filter22', filter);\r\n    // console.log('++')\r\n    // console.log('+++', contacts);\r\n    return contacts;\r\n  }\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\n\r\n// const filtersContacts = (contacts, filter) =>\r\n//   contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n\r\nexport default function ContactList() {\r\n  const { data, isFetching } = useFetchContactsQuery();\r\n  const [deleteContacts, { isLoading: isDeleting }] =\r\n    useDeleteContactsMutation();\r\n\r\n  // console.log('data', data);\r\n  // const dispatch = useDispatch();\r\n\r\n  // const contacts = useSelector(state => state.data);\r\n  // console.log('contacts', contacts);\r\n  const filter = useSelector(state => state.filter);\r\n  // console.log('filter', filter);\r\n  const contactsList = filtersContacts(data, filter);\r\n  // console.log('contactsList', contactsList);\r\n\r\n  // const deleteItem = id => {\r\n  //   dispatch(deleteContacts(id));\r\n  // };\r\n\r\n  return (\r\n    <ol className={s.list}>\r\n      {isFetching && <p>Loading...</p>}\r\n      {contactsList &&\r\n        contactsList.map(el => (\r\n          <li key={el.id}>\r\n            <p className={s.posBtn}>\r\n              <span className={s.text}>\r\n                {el.name}: {el.number}\r\n              </span>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => deleteContacts(el.id)}\r\n                className={s.btn}\r\n              >\r\n                {isDeleting ? `Delete...` : `Delete`}\r\n              </button>\r\n            </p>\r\n          </li>\r\n        ))}\r\n    </ol>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { filterContacts } from 'redux/slices/filter';\r\n\r\n// import PropTypes from 'prop-types';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  // const contacts = useSelector(state => state.contacts);\r\n  // const filter = useSelector(state => state.filter);\r\n\r\n  const changeFilter = e => {\r\n    // console.log(e.currentTarget.value);\r\n    let value = e.currentTarget.value;\r\n    dispatch(filterContacts(value));\r\n\r\n  };\r\n\r\n  return (\r\n    <label>\r\n      <input type=\"text\" onChange={changeFilter} />\r\n    </label>\r\n  );\r\n}\r\n\r\n// Filter.propTypes = {\r\n//   value: PropTypes.string.isRequired,\r\n//   onChange: PropTypes.func.isRequired,\r\n// };\r\n","import s from 'components/App/App.module.css';\n// import React, { useState, useEffect } from 'react';\nimport Section from 'components/Section/Section';\nimport ContactForm from 'components/ContactForm/ContactForm';\n// import { nanoid } from 'nanoid';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nexport default function App() {\n\n  return (\n    <div className={s.wrapper}>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter/>\n        <ContactList />\n      </Section>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport store from 'redux/store/index';\nimport './index.css';\nimport App from 'components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n     </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}